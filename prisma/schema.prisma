// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Kanji
//

// 1

model Kanji {
  id             Int               @id @default(autoincrement())
  literal        String            @unique
  codepoint      Kanji_Codepoint[]
  misc           Kanji_Misc?
  dic_ref        Kanji_DicRef[]
  query_code     Kanji_QueryCode[]
  reading        Kanji_Reading[]
  meaning        Kanji_Meaning[]
  nanori         Kanji_Nanori[]
  variant        Kanji_Variant[]   @relation("variant")
  kanjiToVariant Kanji_Variant[]   @relation("kanjiToVariant")

  @@map("kanji")
}

// 2

model Kanji_Codepoint {
  kanji    Kanji @relation(fields: [kanji_id], references: [id], onDelete: Cascade)
  kanji_id Int

  type            KwCodepointType @relation(fields: [kw_codepoint_id], references: [id], onDelete: Cascade)
  kw_codepoint_id Int

  value String

  @@id([kanji_id, kw_codepoint_id])
  @@map("kanji.codepoint")
}

model Kanji_Misc {
  kanji    Kanji @relation(fields: [kanji_id], references: [id], onDelete: Cascade)
  kanji_id Int   @unique

  grade    KwGrade? @relation(fields: [grade_id], references: [id], onDelete: Cascade)
  grade_id Int?

  strokeCount    KwStrokeCount @relation(fields: [strokeCount_id], references: [id], onDelete: Cascade)
  strokeCount_id Int

  jlpt    KwJLPT? @relation(fields: [jlpt_id], references: [id], onDelete: Cascade)
  jlpt_id Int?

  rad_name Kanji_Misc_RadName[]

  freq Int?

  @@id([kanji_id])
  @@map("kanji.misc")
}

model Kanji_DicRef {
  kanji    Kanji @relation(fields: [kanji_id], references: [id], onDelete: Cascade)
  kanji_id Int

  type            KwDicRefType @relation(fields: [kwDicRefType_id], references: [id], onDelete: Cascade)
  kwDicRefType_id Int

  mVol KwMorohashiVol? @relation(fields: [kwMorohashiVol_id], references: [id], onDelete: Cascade)

  kwMorohashiVol_id Int?

  mPage Int?

  value String

  @@id([kanji_id, kwDicRefType_id])
  @@map("kanji.dicref")
}

model Kanji_QueryCode {
  kanji    Kanji @relation(fields: [kanji_id], references: [id], onDelete: Cascade)
  kanji_id Int

  type               KwQueryCodeType @relation(fields: [kwQueryCodeType_id], references: [id], onDelete: Cascade)
  kwQueryCodeType_id Int

  skipMiscalss      KwSkipMisclass? @relation(fields: [kwSkipMisclass_id], references: [id], onDelete: Cascade)
  kwSkipMisclass_id Int?

  value String

  @@id([kanji_id, kwQueryCodeType_id])
  @@map("kanji.querycode")
}

model Kanji_Reading {
  id Int @id @default(autoincrement())

  kanji    Kanji @relation(fields: [kanji_id], references: [id], onDelete: Cascade)
  kanji_id Int

  type                  KwKanjiReadingType @relation(fields: [kwKanjiReadingType_id], references: [id], onDelete: Cascade)
  kwKanjiReadingType_id Int

  value String

  @@unique([kanji_id, kwKanjiReadingType_id, value])
  @@map("kanji.reading")
}

model Kanji_Meaning {
  id Int @id @default(autoincrement())

  kanji    Kanji @relation(fields: [kanji_id], references: [id], onDelete: Cascade)
  kanji_id Int

  lang      KwLang @relation(fields: [kwLang_id], references: [id], onDelete: Cascade)
  kwLang_id Int

  value String

  @@unique([kanji_id, kwLang_id, value])
  @@map("kanji.meaning")
}

model Kanji_Nanori {
  id Int @id @default(autoincrement())

  kanji    Kanji @relation(fields: [kanji_id], references: [id], onDelete: Cascade)
  kanji_id Int

  value String

  @@unique([kanji_id, value])
  @@map("kanji.nanori")
}

model Kanji_Variant {
  id Int @id @default(autoincrement())

  kanji    Kanji @relation(name: "kanjiToVariant", fields: [kanji_id], references: [id], onDelete: Cascade)
  kanji_id Int

  kanji_variant    Kanji @relation(name: "variant", fields: [kanji_variant_id], references: [id])
  kanji_variant_id Int

  @@unique([kanji_id, kanji_variant_id])
  @@map("kanji.variant")
}

// 3

model Kanji_Misc_RadName {
  id Int @id @default(autoincrement())

  kanjiMisc    Kanji_Misc @relation(fields: [kanjiMisc_id], references: [kanji_id], onDelete: Cascade)
  kanjiMisc_id Int

  value String @unique

  @@map("kanji.misc.rad")
}

//
// Keyword tables
//

model KwCodepointType {
  id    Int    @id @default(autoincrement())
  value String @unique

  kanjiCodepoint Kanji_Codepoint[]

  @@map("kw.kanji.codepointtype")
}

model KwRadicalType {
  id    Int    @id @default(autoincrement())
  value String @unique

  @@map("kw.kanji.radicaltype")
}

model KwGrade {
  id    Int    @id @default(autoincrement())
  value String @unique

  kanjiMisc Kanji_Misc[]

  @@map("kw.kanji.grade")
}

model KwStrokeCount {
  id    Int    @id @default(autoincrement())
  value String @unique

  strokeCount Kanji_Misc[]

  @@map("kw.kanji.strokecount")
}

model KwJLPT {
  id    Int    @id @default(autoincrement())
  value String @unique

  kanjiMisc Kanji_Misc[]

  @@map("kw.kanji.jlpt")
}

model KwDicRefType {
  id    Int    @id @default(autoincrement())
  value String @unique

  kanjiDicRef Kanji_DicRef[]

  @@map("kw.kanji.dicref")
}

model KwMorohashiVol {
  id    Int    @id @default(autoincrement())
  value String @unique

  kanjiDicRef Kanji_DicRef[]

  @@map("kw.kanji.morohashivol")
}

model KwQueryCodeType {
  id    Int    @id @default(autoincrement())
  value String @unique

  kanjiQueryCode Kanji_QueryCode[]

  @@map("kw.kanji.querycodetype")
}

model KwSkipMisclass {
  id    Int    @id @default(autoincrement())
  value String @unique

  kanjiQueryCode Kanji_QueryCode[]

  @@map("kw.kanji.skipmisclass")
}

model KwKanjiReadingType {
  id    Int    @id @default(autoincrement())
  value String @unique

  kanjiReading Kanji_Reading[]

  @@map("kw.kanji.readingtype")
}

model KwLang {
  id    Int    @id @default(autoincrement())
  value String @unique

  kanji_meaning Kanji_Meaning[]

  @@map("kw.kanji.lang")
}
